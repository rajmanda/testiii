# Trigger the workflow whenever changes are pushed to the deploy directory
on:
  push:
    paths:
      - 'deploy/**'
permissions:
  contents: read
  id-token: write
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      id: checkout
      uses: actions/checkout@v3

    - id: auth
      name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2.0.0  
      with:
        workload_identity_provider: 'projects/175415323680/locations/global/workloadIdentityPools/githubpool/providers/github'
        service_account: github-wif-sa@properties-app-418208.iam.gserviceaccount.com

    # Run the bash script to check if the namespace exists
    - name: Run namespace check
      run: |
        chmod +x .github/workflows/scripts/check_namespace.sh
        
    - name: Setup Terraform
      id: setup_terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Create or select the workspace based on the branch name
    - name: Set up Terraform workspace
      id: setup_workspace
      run: |
        # Set the workspace name based on the current branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "WORKSPACE_NAME=main" >> $GITHUB_ENV
        else
          # Replace slashes with dashes for workspace name
          WORKSPACE_NAME="${{ github.ref }}"; WORKSPACE_NAME=${WORKSPACE_NAME//\//-}
          echo "WORKSPACE_NAME=${WORKSPACE_NAME}" >> $GITHUB_ENV
        fi

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=tf-gcp-wif-tfstate" \
          -backend-config="prefix=terraform/state/${{ env.WORKSPACE_NAME }}"  # Use the workspace name in the prefix

    - name: Select Terraform Workspace
      id: select_workspace
      run: |
        terraform workspace select "${{ env.WORKSPACE_NAME }}" || terraform workspace new "${{ env.WORKSPACE_NAME }}"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: terraform_plan
      run: terraform plan -input=false

    - name: Terraform Apply
      id: terraform_apply
      run: terraform apply -auto-approve -input=false

    # Generates a destruction plan for Terraform
    # - name: Terraform Plan Destroy
    #   id: terraform_plan_destroy
    #   run: terraform plan -destroy -input=false

    # - name: Terraform Destroy
    #   id: terraform_destroy
    #   run: terraform destroy -auto-approve -input=false
    
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Make sure this is present
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Authenticate to GCP
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2.0.0
        with:
          workload_identity_provider: 'projects/175415323680/locations/global/workloadIdentityPools/githubpool/providers/github'
          service_account: github-wif-sa@properties-app-418208.iam.gserviceaccount.com

      # Step 3: Set up GKE credentials
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: simple-autopilot-public-cluster
          location: us-central1  # Adjust your cluster zone
          project_id: properties-app-418208

      # Step 4: Deploy to GKE
      - name: Deploy to GKE
        run: |
          echo "Deploying to GKE..."
          kubectl apply -f deploy/kalyanam-deployment.yaml  # Adjust the path as needed
          kubectl apply -f deploy/rsvpbackend-deployment.yaml  # Adjust the path as needed
